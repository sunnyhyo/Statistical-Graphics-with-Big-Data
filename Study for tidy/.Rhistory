df.tbl <- tibble( xx = runif(5),
y = runif(5))
df.DF <- data.frame( xx = runif(5),
y = runif(5))
df.tbl <- tibble( xx = runif(5),
y = runif(5))
# as.dataframe() : tibble 을 data frame 으로 바꾸기
class(as.data.)
library(tidyverse)
df.tbl <- tibble( xx = runif(5),
y = runif(5))
# as.dataframe() : tibble 을 data frame 으로 바꾸기
class(as.data.frame(df.tbl))
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
##################
# Parsing a vector
# parse type 함수 : character vector 로 읽은 후 type 의 형태로 바꿔줌
str(parse_logical(c("TRUE", "FALSE", "NA")))
x <- parse_integer(c("123", "345", "abc", "123.45"))
x
parse_date(c("2010-01-01", "1979-10-14"))
str(parse_date(c("2010-01-01", "1979-10-14")))
stocks %>% spread(year, return)   # 한가지 변수를
###################
# Missing values
# Missing 의 종류
# - explicitly missing: 자료는 있으나 파악되지 못하여 NA 로 표시
# – implicitly missing: 자료가 존재하지 않는 경우
stocks <- tibble(year = c(2015,2015,2015,2015,2016,2016,2016),
qtr = c(1,2,3,4,2,3,4),
return = c(1.88,0.59,0.35,NA,0.92,0.17,2.66))
stocks
stocks %>% spread(year, return)   # 한가지 변수를
stocks %>% spread(year, return) %>%
gather(year, return, `2015`, `2016`)
# complete
# complete() 함수를 이용하여 implicit missing 을 exlicit missing 으로 변환.
# complete(): 모든 unique combination 을 찾아서 만들어줌. missing 은 NA 로 채우기.
stocks %>% complete(year, qtr)
library(tidyverse)
library(nycflights13)
################
# 10 월 22 일
################
# 물어볼거: group_by 정보 없어지는거
flights
# 이 자료에서 특이한 것, dep_time, arr_time 시간분
# useful creation functions
# • Arithmetic operators: +, -, *, /, ^.
# • Modular arithmetic
# – %/% (integer division)
# – %% (remainder), x == y * (x %/% y) + (x %% y)
32 %/% 3  # 몫
32 %% 3   # 나머지
x == y * (x %/% y) + (x %% y)
################
# 10 월 22 일
################
# 물어볼거: group_by 정보 없어지는거
flights
# 이 자료에서 특이한 것, dep_time, arr_time 시간분
# useful creation functions
# • Arithmetic operators: +, -, *, /, ^.
# • Modular arithmetic
# – %/% (integer division)
# – %% (remainder), x == y * (x %/% y) + (x %% y)
32 %/% 3  # 몫
32 %% 3   # 나머지
# x == y * (x %/% y) + (x %% y)
transmute(flights,
dep_time,
hour = dep_time %/% 100,   # 시간만 남는다. (정수몫)정수 나누기 연산자
minute = dep_time %% 100)  # 분만 남는다. 나머지 연산자
# %% 나머지 연산자
# %/% 정수 나누기 연산자 (정수 몫 반환)
# %*% 행렬 곱하기 연산자
# %in% 벡터 내 특정 값 포함 연산자
# Arithmetic operators
#  +, -, *, /, ^
# Modular arithmetic
x <- c(1:10); y <- c(5)
x %% y
x %/% y
x %in% y
y %in% x
x == y * (x %/% y) + (x %% y)
# Logs
log(2)
log2(2)
log10(2)
x<- 1:10
x
# Offsets
lag(x); lead(x)
# Cumulative and rolling aggregates
cumsum(x); x
# Logical comparisons
# <, <=, >, >=, !=
y <- c(1, 2, 2, NA, 3, 4)
y
rank(y) # 2 와 3의 중앙값 2.5 위
min_rank(y)  # min_rank() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 1, 1, 4, 4,...' 처리
min_rank(desc(y))
row_number(y) # row_number() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 2, 3, ...' 처리
yy <- c(1, 2, NA, 3, 4, 2)
yy
row_number(yy)
dense_rank(yy)  # dense_rank() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 1, 1, 2, 2,...' 처리
percent_rank(yy)
yy
min_rank(yy)
dense_rank(yy)
percent_rank(yy)
(min_rank(yy) - 1) / (length(yy) - 1)
(min_rank(yy) - 1) / (length(yy, na.rm = TRUE) - 1)
