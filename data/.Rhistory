flights
# cancelled flights 와 non-cancelled flights 의 scheduled departure time 을 비교하려고
# 한다. scheduled departure time 을 시각화하여 비교하고 차이를 기술하시오.
flights %>% mutate(status = ifelse(is.na(sched_dep_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time, color = status)) + geom_line()
# cancelled flights 와 non-cancelled flights 의 scheduled departure time 을 비교하려고
# 한다. scheduled departure time 을 시각화하여 비교하고 차이를 기술하시오.
flights %>% mutate(status = ifelse(is.na(sched_dep_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time, color = status)) + geom_freqpoly()
# cancelled flights 와 non-cancelled flights 의 scheduled departure time 을 비교하려고
# 한다. scheduled departure time 을 시각화하여 비교하고 차이를 기술하시오.
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time, color = status)) + geom_freqpoly()
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time)) + geom_bar()
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time)) + geom_bar()+ facet_wrap(~status)
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time)) + geom_bar(stat = density)+ facet_wrap(~status)
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time)) + geom_bar(stat = "density")+ facet_wrap(~status)
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
ggplot(aes(sched_dep_time)) + geom_density(aes(color = status))
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month,status) %>% count(status)
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status)
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggpllot(aes(month, n, color = status)) + geom_density()
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, color = status)) + geom_density()
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, color = status)) + geom_freqpoly()
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, color = status)) + geom_bar()
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, color = status)) + geom_bar(stat= "identity")
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, fill = status)) + geom_bar(stat= "identity")
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, fill = status)) + geom_bar(stat= "identity", position = dodge)
# cancelled flights 수와 non-cancelled flights 의 수를 월별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, fill = status)) + geom_bar(stat= "identity", position = "fill")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n)) + geom_freqpoly(stat = "density")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n)) + geom_freqpoly(stat = "identity")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n, color = status)) + geom_freqpoly(stat = "identity")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n)) + geom_bar(stat = "identity") + facet_wrap(~status)
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(month) %>% count(status) %>%
ggplot(aes(month, n)) + geom_bar(stat = "identity") + facet_wrap(~status, scale = "free_y")
#   cancelled flights 수와 non-cancelled flights 의 수를 날짜 별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day) %>% summarise(n = n())
#   cancelled flights 수와 non-cancelled flights 의 수를 날짜 별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n())
#   cancelled flights 수와 non-cancelled flights 의 수를 날짜 별로 구하여 시각화한 후
# 비교하시오. 특별한 점이 발견되는가?
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n()) %>%
ggplot(aes(day, n)) + geom_line(aes(color = status))
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n()) %>%
ggplot(aes(day, n)) + geom_bar(stat = "identity") + facet_grid(~status, scale = "free_y")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n()) %>%
ggplot(aes(day, n)) + geom_bar(stat = "identity") + facet_grid(~status)
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n()) %>%
ggplot(aes(day, n)) + geom_bar(stat = "identity") + facet_wrap(~status, scale = "free_y")
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status)
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")+
facet_wrap(status~)
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")+
facet_grid(status~)
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")+
facet_wrap(~status)
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")+
facet_wrap(~status, sclae = "free_y")
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelles")) %>%
group_by(day, status) %>% count(status) %>%
ggplot(aes(day, n, fill = status)) + geom_bar(stat = "identity", position = "dodge")+
facet_wrap(~status, scale = "free_y")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num) %>% count(status)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n())
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
ggplot(aes(tail_num, n, fill = status)) + geom_bar(stat = "identity")
flights %>% mutate(status = ifelse(is.na(arr_time), "cancelled", "non-cancelled")) %>%
group_by(day, status) %>% summarise(n = n())
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
ggplot(aes(tail_num, n, fill = status)) + geom_bar(stat = "identity") + facet_wrap(~status)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
ggplot(aes(tail_num, n, fill = status)) + geom_bar(stat = "identity", scale = "free_y") + facet_wrap(~status)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
ggplot(aes(tail_num, n, fill = status)) + geom_bar(stat = "identity") + facet_wrap(~status, scale = "free_y")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
mutate(rate = mean(status =="cancelled"))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
summarise(rate = mean(status =="cancelled"))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n(),
rate = mean(status =="cancelled"))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n(),
rate = mean(n[status =="cancelled"]))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>% mutate(rate = cancelled/not_cancelled)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non-cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n, na = 0)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n, na = "0")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate= cancelled/non_cancelled)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate= cancelled/non_cancelled) %>% arrange(desc(rate))
2/3
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled,
rank = rank(desc(rate))) %>%
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled,
rank = rank(desc(rate)))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
ggplot(aes(tail_num, rate)) %>% geom_bar(stat = "identity")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
ggplot(aes(tail_num, rate)) + geom_bar(stat = "identity")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
ggplot(aes(tail_num, rate)) + geom_bar(stat = "identity")
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% sort(desc(rate)) %>%
ggplot(aes(tail_num, rate)) + geom_bar(stat = "identity")
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% sort(desc(rate))
# skip = Number of lines to skip before reading data.
# n번째 줄을 column 이름으로 하고 그 이후의 자료를 읽을 수도 있음
heights2 <- read.csv("heights.csv", skip = 3)  # skip = 3, 3번째 줄이 변수이름, X변수명
head(heights2)  # x3000
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate))
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
filter(rank(desc(rate))>=10)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
filter(rank(desc(rate))<=10)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>% arrange(desc(rate)) %>%
filter(min_rank(desc(rate))<=10)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled,
rank = min_rank(desc(rate))) %>%
filter(rank<=10)
#   특정 비행기에 대하여 cancel 이 자주 있는지를 알아보려고 한다. 이를 위한 자료를
# 추출하고 시각화 한 후 결과를 정리하시오.
flights %>% mutate(status = ifelse(is.na(arr_delay), "cancelled", "non_cancelled")) %>%
group_by(tail_num, status) %>% summarise(n = n()) %>%
spread(status, n) %>% mutate(rate = cancelled/non_cancelled) %>%
ggplot(aes(tail_num, rate)) + geom_bar(stat = "identity")
df <- tibble(A = rep(LETTERS[1:3], each = 4),
B = rpois(12, 10))
df
df %>% mutate(prop_B = B / sum(B),
sum_B = sum(B))
df %>% mutate(prop_B = B / sum(B),
sum_B = sum(B))
popular_dests <- flights %>%
group_by(dest) %>%
filter(n()>365)
popular_dests
popular_dests %>% filter(arr_delay > 0)
popular_dests %>% filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay),
sum_delay = sum(arr_delay))
popular_dests %>% filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay),
sum_delay = sum(arr_delay)) %>%
select(year:day, arr_delay, prop_delay, sum_delay)
popular_dests %>% filter(arr_delay > 0 )
popular_dests %>% filter(arr_delay > 0 ) %>%
mutate(prop_delay = arr_delay / sum(arr_delay),
sum_delay = sum(arr_delay))
popular_dests %>% filter(arr_delay > 0 ) %>%
mutate(prop_delay = arr_delay / sum(arr_delay),
sum_delay = sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay, sum_delay)
popular_dests %>% filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay),
sum_delay = sum(arr_delay)) %>%
select(year:day, arr_delay, prop_delay, sum_delay)
setwd("C:/Users/HS/Documents/GitHub/Statistical-Graphics-with-Big-Data/data")
heights <- read_csv("heights.csv")
heights
heights1 <- read.csv("heights.csv")
head(heights1)
# skip = Number of lines to skip before reading data.
# n번째 줄을 column 이름으로 하고 그 이후의 자료를 읽을 수도 있음
heights2 <- read.csv("heights.csv", skip = 3)  # skip = 3, 3번째 줄이 변수이름, X변수명
head(heights2)  # x3000
heights3 <- read_csv("heights.csv", skip = 3)  # skip = 3, 3번째 줄이 변수이름, `변수명`
head(heights3)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
# col_names = FALSE 첫줄을 자료로 읽기
heights4 <- read_csv("heights.csv", col_names = FALSE)  # 첫번째 줄부터 자료를 읽어라
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", ship= 2)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", ship= 1)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", ship= 1)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", skip= 1)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", skip= 2)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", skip= 3)
# comment = "문자" : 특정 문자로 시작되는 줄을 빼고 읽을 수도 있음
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#", skip= 0)
# col_names = FALSE 첫줄을 자료로 읽기
heights4 <- read_csv("heights.csv", col_names = FALSE)  # 첫번째 줄부터 자료를 읽어라
heights4
class(heights1)
class(heights4)
# col_names 를 이용하여 column  이름지정가능
heights <- read_csv("heights.csv", col_names = paste0("A",1:6))
heights     # # 첫번째 줄부터 자료를 읽고 변수명을 새로 지정한다
not_cancelled %>% count(tail_num, wt= distance) %>%
left_join(
not_cancelled %>% group_by(tail_num) %>% summarise(sum = sum(distance))
)
parse_logical(c("TRUE", "FALSE", "NA"))
str(parse_logical(c("TRUE", "FALSE", "NA")))
parse_integer(c("1", "2", "3"))
str(parse_integer(c("1", "2", "3")))
parse_date(c("2010-01-01", "1979-10-14"))
str(parse_date(c("2010-01-01", "1979-10-14")))
parse_integer(c("1", "231", ".", "456"), na = ".")
# parsing 에 실패하는 경우 warning 을 주고 NA 로 처리.
# problems()로 문제점 파악 가능
x <- parse_integer(c("123", "345", "abc", "123.45"))
x
problems(x)
problems(x)        # 문제 가르쳐줌
challenges <- read_csv(readr_example("challenge.csv"))
# 자료의 1000 줄에 대한 error 메세지와 그 다음 5줄에 대한 결과를 함께 보여줌
problems(challenges)   # no trailing characters,
challenges[999:1002,]  # 문제점 확인해보니 1000 줄 이후부터 자료 형태가 바뀐다!
challenge <- read_csv(readr_example("challenge.csv"),
col_types = cols(x = col_double(),  # <dbl>
y = col_date()))   # <date> y = col_date() 이용
challenge[999:1002,]
####################
# Other stretegies
# guess_max = 에 이용할 줄 수를 지정
# Maximum number of records to use for guessing column types.
# 모든 자료를 character 로 읽은 후 확인.
challenge <- read_csv(readr_example("challenge.csv"),
guess_max = 1001)
challenge[999:1002,]
read_csv(readr_example("challenge.csv"),
guess_max = 1001)
challenge[999:1002,]
problems(challenge)   # 문제없음!
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks
# “오래된 비행기 일수록 cancel 이 많다” 라는 가설에 대해 알아보고자 한다. 알맞은
# 자료를 추출, 그림을 그려 확인하시오.
stocks <- tibble(
year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr = c( 1, 2, 3, 4, 2, 3, 4),
return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66)
)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`)
stocks
stocks %>%
spread(year, return)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`)
stocks %>%
spread(key = year, value = return) %>%
gather(`2015`:`2016`, key = year,value = return )
stocks %>%
spread(key = year, value = "return") %>%
gather(`2015`:`2016`, key = year, value = return )
stocks %>%
spread(key = "year", value = "return") %>%
gather(`2015`:`2016`, key = year, value = return )
complete
stocks %>% complete(year, return)
stocks %>% complete(year, return,qtr)
stocks %>% complete(year, qtr)
stocks %>% complete(year, qtr,return)
stocks %>% complete(year, qtr)
parse_number("1.23")
parse_double("1.23")
parse_date("01/02/15", "%m/%d/%y")
guess_parser(c("12,352,561"))
x <- c(1, 1, 1, 5, 5, 9, 7, NA, NA)
x
# rank(): Returns the sample ranks of the values in a vector, missing value
# rank는 순위대로 정렬해주는게 아니라 순위의 색인을 나타내줍니다.missing value 도 색인 처리
# 중복순위는 중앙값 처리, NA 중복은 순서대로
rank(x)
# 2 2 2 4.5 4.5 7 6 8 9
# row_number() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 2, 3, ...' 처리
# 순위 중복을 observation 순서대로 순위를 매긴다. NA는 NA
row_number(x)        # 작은 값부터 1 순위
# 1 2 3 4 5 7 6 NA NA
# min_rank() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 1, 1, 4, 4,...' 처리
# 일반적인 내신처리
# (공백준다) 없는 등수O. 동순위는 상위 rank, 그 다음 순위는 하위 rank
min_rank(x)
# 1 1 1 4 4 7 6 NA NA
# dense_rank() : 순위(ranking) index 반환, 동일값에 대해서는 '1, 1, 1, 2, 2,...' 처리
# 올림픽순위
# (공백안준다)
dense_rank(x)
cume_dist(x)
3/7; 5/7; 6/7; 7/7
# dplyr::cume_dist
rank(x, ties.method = "max", na.last = "keep")/sum(!is.na(x))
# percent_rank() : min_rank() 기준의 순위(ranking)에 대한 비율(0~1)
# 내 위에 몇프로 있는가?
percent_rank(x)
